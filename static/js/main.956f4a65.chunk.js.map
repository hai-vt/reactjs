{"version":3,"sources":["Blogs/Header/Header.js","Blogs/Home/Home.js","Blogs/Index.js","App.js","serviceWorker.js","index.js"],"names":["Aboutme","Blog","react_default","a","createElement","Contactme","Header","BrowserRouter","className","Link","to","Route","path","component","Home","Component","Index","Header_Header","Home_Home","App","Index_Index","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTAIA,SAASA,IACL,MACI,kEAIR,SAASC,IACL,OAAOC,EAAAC,EAAAC,cAAA,kBAGX,SAASC,IACL,OAAOH,EAAAC,EAAAC,cAAA,wBA6BIE,MA1Bf,WACI,OACIJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACAL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,UACfN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACfN,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,WAAT,aAEAR,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,UAAT,SAEAR,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,aAAT,iBAKJR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWb,IACjCE,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWZ,IAChCC,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWR,OCnClBS,mLAEb,OACIZ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACAL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,gBACXN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WAAf,mBACAN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aAAf,+BAGAN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QAAf,iCACkCN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,WAAT,kBAVhBK,aCKbC,0LAEb,OACId,EAAAC,EAAAC,cAAA,OAAKI,UAAU,kBACfN,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,cALuBH,cCiBpBI,mLARX,OACEjB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACXN,EAAAC,EAAAC,cAACgB,EAAD,cAJQL,aCHEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.956f4a65.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './header.css';\n\nfunction Aboutme() {\n    return (\n        'how to remove this function and call to component About/Aboutme'\n    )\n}\n\nfunction Blog() {\n    return <h2>Blog</h2>;\n}\n\nfunction Contactme() {\n    return <h2>Contact Me</h2>;\n}\n\nfunction Header() {\n    return (\n        <Router>\n        <div className=\"header\">\n        <nav className=\"nav\">\n        <ul>\n        <li>\n        <Link to=\"/about/\">About Me</Link>\n        </li>\n        <li>\n        <Link to=\"/blog/\">Blog</Link>\n        </li>\n        <li>\n        <Link to=\"/contact/\">Contact Me</Link>\n        </li>\n        </ul>\n        </nav>\n\n    <Route path=\"/about/\" component={Aboutme} />\n    <Route path=\"/blog/\" component={Blog} />\n    <Route path=\"/contact/\" component={Contactme} />\n    </div>\n    </Router>\n);\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nexport default class Home extends Component {\n    render () {\n        return (\n            <Router>\n            <div className=\"home-content\">\n                <div className=\"welcome\">Hello every one</div>\n                <div className=\"introduce\">\n                    I am Hai, I am from VietNam\n                </div>\n                <div className=\"link\">\n                    For more details please click <Link to=\"/about/\">here</Link>\n                </div>\n            </div>\n        </Router>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Header from './Header/Header';\nimport Home from './Home/Home';\n/*import Aboutme from './About/AboutMe';*/\n/*import BlogList from './Blog/BlogList';*/\n/*import ContactMe from './Contact/ContactMe';*/\nimport './index.css';\n\nexport default class Index extends Component {\n    render() {\n        return (\n            <div className=\"main-container\">\n            <Header />\n            <Home />\n            </div>\n    );\n    }\n}","import React, { Component } from 'react';\n/*import 'bootstrap/dist/css/bootstrap.min.css';*/\n/*import Header from './shopstack/header/header';\nimport Banner from './shopstack/banner/banner';\nimport Contactus from './shopstack/contactus/contactus';\nimport Services from './shopstack/services/services';\nimport Aboutus from './shopstack/aboutus/aboutus';\nimport Abouttean from './shopstack/aboutteam/aboutteam';\nimport Ourwork from './shopstack/ourwork/ourwork';\nimport Ourclients from './shopstack/ourclients/ourclients';\nimport Footer from './shopstack/footer/footer';*/\n/*import TodoForm from './components/Todoform/Todoform';\nimport './App.css';*/\nimport Index from './Blogs/Index';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Index />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}