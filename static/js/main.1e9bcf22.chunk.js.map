{"version":3,"sources":["images/avartar.jpg","logo.svg","components/header/header.js","components/about/about.js","components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","class","src","avartar","alt","Component","About","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","old","setState","prevState","props","_this2","fullname","email","onClick","updateOld","gender","defaultProps","Footer","App","className","header_header","about","footer_footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iJCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uLCgBzBC,0LAVP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,UACPH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,WACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAASC,IAAI,qBALlBC,cCFfC,cACD,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,IAAK,IAHQR,2EAQfG,KAAKM,SAAS,SAACC,EAAWC,GACxB,MAAO,CAAEH,IAAKE,EAAUF,IAAM,sCAGvB,IAAAI,EAAAT,KACL,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACPH,EAAAC,EAAAC,cAAA,sBAAcU,KAAKQ,MAAME,UACzBtB,EAAAC,EAAAC,cAAA,mBAAWU,KAAKQ,MAAMG,OACtBvB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,QAAMsB,QAAS,kBAAMH,EAAKI,cAA1B,OAAH,KAAuDb,KAAKI,MAAMC,KAClEjB,EAAAC,EAAAC,cAAA,oBAAYU,KAAKQ,MAAMM,gBAnBnBnB,aAyBpBC,EAAMmB,aAAe,CACjBL,SAAU,SACVC,MAAO,uBACPG,OAAQ,UAGGlB,QClBAoB,0LAVP,OACI5B,EAAAC,EAAAC,cAAA,OAAKC,MAAM,UACPH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aAAX,2BAJKI,cCgBNsB,gMAVX,OACE7B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,OACX9B,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAC+B,EAAD,cANQ1B,cCKE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1e9bcf22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avartar.1902f191.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport avartar from './../../images/avartar.jpg';\nimport './header.css';\n\nclass Header extends Component {\n    render() {\n        return (\n            <div class=\"Header\">\n                <div class=\"Avartar\">\n                <img src={avartar} alt=\"avartar\" />\n                </div>\n            </div>\n    )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass About extends Component {\n     constructor() {\n    super();\n    this.state = {\n      old: 31,\n    };\n  }\n\n  updateOld() {\n    this.setState((prevState, props) => {\n      return { old: prevState.old + 1 }\n    });\n  }\n    render() {\n        return (\n            <div class=\"Aboutinfo\">\n                <p>FullName: {this.props.fullname}</p>\n                <p>Email: {this.props.email}</p>\n                <p><span onClick={() => this.updateOld()}>Old</span>: {this.state.old}</p>\n                <p>Gender: {this.props.gender}</p>\n            </div>\n        )\n    }\n}\n\nAbout.defaultProps = {\n    fullname: 'Hai Vu',\n    email: 'hai.v@shopstack.asia',\n    gender: 'female'\n}\n\nexport default About;","import React, { Component } from 'react';\nimport './footer.css';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div class=\"Footer\">\n                <div class=\"Copyright\">\n                design by haivt\n                </div>\n            </div>\n    )\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport Header from './components/header/header';\nimport About from './components/about/about';\nimport Footer from './components/footer/footer';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Header />\n          <About />\n          <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}